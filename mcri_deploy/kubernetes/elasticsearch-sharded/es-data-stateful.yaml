# kubectl get statefulsets es-data -o=yaml | yq -Y 'del(.status) | del(.metadata.annotations) | del(.metadata.generation) | del(.metadata.creationTimestamp) | del(.metadata.resourceVersion) | del(.metadata.selfLink) | del(.metadata.uid) | del(.spec.volumeClaimTemplates[].status)'

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    component: elasticsearch
    role: data
  name: es-data
  namespace: default
spec:
  podManagementPolicy: OrderedReady
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: elasticsearch
      role: data
  serviceName: elasticsearch-data
  template:
    metadata:
      creationTimestamp: null
      labels:
        component: elasticsearch
        role: data
    spec:
      containers:
        - env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: CLUSTER_NAME
              value: myesdb
            - name: NODE_MASTER
              value: "false"
            - name: NODE_INGEST
              value: "false"
            - name: HTTP_ENABLE
              value: "true"
            - name: ES_JAVA_OPTS
              value: -Xms1024m -Xmx1024m
            - name: PROCESSORS
              valueFrom:
                resourceFieldRef:
                  divisor: "0"
                  resource: limits.cpu
          image: quay.io/pires/docker-elasticsearch-kubernetes:6.3.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 30
            successThreshold: 1
            tcpSocket:
              port: transport
            timeoutSeconds: 1
          name: es-data
          ports:
            - containerPort: 9200
              name: http
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /_cluster/health
              port: http
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 20
          resources:
            limits:
              cpu: "2"
            requests:
              cpu: 500m
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /data
              name: storage
      dnsPolicy: ClusterFirst
      initContainers:
        - command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          image: busybox:1.27.2
          imagePullPolicy: IfNotPresent
          name: init-sysctl
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 80Gi
        storageClassName: standard
        volumeMode: Filesystem
