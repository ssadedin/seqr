# -*- coding: utf-8 -*-
# Generated by Django 1.11.22 on 2019-07-23 18:25
from __future__ import unicode_literals

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


def remove_missing_family_saved_variants(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    # see https://docs.djangoproject.com/en/1.11/ref/migration-operations/#django.db.migrations.operations.RunPython
    SavedVariant = apps.get_model("seqr", "SavedVariant")
    db_alias = schema_editor.connection.alias
    missing_family_vars = SavedVariant.objects.using(db_alias).filter(family__isnull=True)
    if missing_family_vars.count() == 0:
        return

    missing_family_agg = missing_family_vars.values('project__name').annotate(count=models.Count('*'))
    can_delete = raw_input(
        '\nOkay to delete the following saved variants which have no associated family (y/n):\n{}\n'.format(
            '\n'.join('{}: {}'.format(agg['project__name'], agg['count'])
                      for agg in sorted(missing_family_agg, key=lambda agg: agg['count'], reverse=True))
    ))
    if can_delete != 'y':
        raise Exception('Unable to migrate, variants with no family still exist')

    deleted_count, cascaded_deleted_models = missing_family_vars.delete()
    print('Deleted {} models:\n{}'.format(deleted_count, '\n'.join(
        ['{}: {}'.format(k.split('.')[1], v) for k, v in cascaded_deleted_models.items()])))


def parse_saved_variant_json(apps, schema_editor):
    Family = apps.get_model("seqr", "Family")
    Individual = apps.get_model("seqr", "Individual")
    SavedVariant = apps.get_model("seqr", "SavedVariant")
    db_alias = schema_editor.connection.alias

    family_guids_by_id = {f.family_id: f.guid for f in Family.objects.using(db_alias).all()}
    individual_guids_by_id = {i.individual_id: i.guid for i in Individual.objects.using(db_alias).all()}

    saved_variants = SavedVariant.objects.using(db_alias).exclude(saved_variant_json__has_key='mainTranscriptId')
    print('Updating saved variant json for {} variants'.format(len(saved_variants)))
    for variant in saved_variants:
        if variant.saved_variant_json:
            if 'populations' in variant.saved_variant_json:
                main_transcript = variant.saved_variant_json.pop('mainTranscript')
                variant.saved_variant_json['mainTranscriptId'] = main_transcript['transcriptId'] if main_transcript else None
#else:
#                variant.saved_variant_json = _variant_details(variant.saved_variant_json, family_guids_by_id, individual_guids_by_id)

            variant.save()
    print('Saved variant json updated')


def unparse_saved_variant_json(apps, schema_editor):
    SavedVariant = apps.get_model("seqr", "SavedVariant")
    db_alias = schema_editor.connection.alias

    saved_variants = SavedVariant.objects.using(db_alias).filter(saved_variant_json__has_key='mainTranscriptId')
    print('Updating saved variant json for {} variants'.format(len(saved_variants)))
    for variant in saved_variants:
        main_transcript_id = variant.saved_variant_json.pop('mainTranscriptId')
        variant.saved_variant_json['mainTranscript'] = variant.saved_variant_json['transcripts'].get(main_transcript_id, {})
        variant.save()
    print('Saved variant json updated')


def add_project(apps, schema_editor):
    SavedVariant = apps.get_model("seqr", "SavedVariant")
    db_alias = schema_editor.connection.alias
    project_ids = {agg['family__project_id'] for agg in SavedVariant.objects.using(db_alias).values('family__project_id').distinct()}
    for project_id in project_ids:
        SavedVariant.objects.using(db_alias).filter(family__project_id=project_id).update(project_id=project_id)


class Migration(migrations.Migration):

    dependencies = [
        ('seqr', '0062_merge_20190723_1539'),
    ]

    atomic = False

    operations = [
        migrations.RunPython(remove_missing_family_saved_variants, reverse_code=migrations.RunPython.noop),
#migrations.AddField(
#            model_name='savedvariant',
#            name='selected_main_transcript_id',
#            field=models.CharField(max_length=20, null=True),
#        ),
        migrations.AlterField(
            model_name='savedvariant',
            name='family',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqr.Family'),
        ),
        migrations.AlterField(
            model_name='savedvariant',
            name='saved_variant_json',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.RunPython(parse_saved_variant_json, reverse_code=unparse_saved_variant_json),
        migrations.AlterUniqueTogether(
            name='savedvariant',
            unique_together=set([('xpos_start', 'xpos_end', 'ref', 'alt', 'family')]),
        ),
        migrations.AlterIndexTogether(
            name='savedvariant',
            index_together=set([]),
        ),
        migrations.AlterField(
            model_name='savedvariant',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqr.Project', null=True),
        ),
        migrations.RunPython(migrations.RunPython.noop, reverse_code=add_project),
        migrations.RemoveField(
            model_name='savedvariant',
            name='project',
        ),
    ]
